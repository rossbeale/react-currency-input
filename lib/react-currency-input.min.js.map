{"version":3,"file":"react-currency-input.min.js","sources":["../src/object-assign-polyfill.js","../src/mask.js","../src/index.js"],"sourcesContent":["Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","import './object-assign-polyfill';\n\nimport PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n    constructor(props) {\n        super(props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 1;\n        this.inputSelectionEnd = 1;\n    }\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    getMaskedValue() {\n        return this.state.maskedValue;\n    }\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    prepareProps(props) {\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.selectAllOnFocus;\n\n        let initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            })\n\n        }\n\n        const { maskedValue, value } = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n\n        return { maskedValue, value, customProps };\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    componentDidMount(){\n        let node = ReactDOM.findDOMNode(this.theInput);\n\n        let selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n        let selectionStart = Math.min(node.selectionStart, selectionEnd);\n        //console.log(\"normal\", selectionStart, selectionEnd);\n        //node.setSelectionRange(selectionStart, selectionEnd);\n\n    }\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    componentWillUpdate() {\n        let node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    componentDidUpdate(prevProps, prevState){\n\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        let separatorsRegex = new RegExp(this.props.decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        let baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + this.props.decimalSeparator.length\n            + Number(this.props.precision)\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        //node.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    handleChange(event) {\n        event.preventDefault();\n        let { maskedValue, value } = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue, value }, () => {\n            this.props.onChange(maskedValue, value, event);\n            this.props.onChangeEvent(event, maskedValue, value);\n        });\n    }\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    handleFocus(event) {\n        if (!this.theInput) return;\n\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    handleBlur(event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    render() {\n        return (\n            <input\n                ref={(input) => { this.theInput = input; }}\n                type={this.props.inputType}\n                value={this.state.maskedValue}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                onMouseUp={this.handleFocus}\n                {...this.state.customProps}\n            />\n        )\n    }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n    selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: '',\n    selectAllOnFocus: false\n};\n\n\nexport default CurrencyInput\n"],"names":["Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","mask","value","precision","decimalSeparator","thousandSeparator","allowNegative","prefix","suffix","undefined","maskedValue","String","let","digits","match","numberIsNegative","allDigitsAreZero","idx","unshift","splice","Number","join","toFixed","split","raw","decimalpos","x","push","trim","parseFloat","CurrencyInput","props","super","this","prepareProps","bind","handleChange","handleFocus","state","inputSelectionStart","inputSelectionEnd","getMaskedValue","customProps","onChange","onChangeEvent","inputType","allowEmpty","selectAllOnFocus","initialValue","replace","RegExp","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","componentWillReceiveProps","nextProps","setState","componentDidMount","ReactDOM","findDOMNode","theInput","componentWillUpdate","node","selectionStart","selectionEnd","componentDidUpdate","prevProps","prevState","isNegative","minPos","Math","max","min","regexEscapeRegex","separatorsRegex","currSeparatorCount","prevSeparatorCount","adjustment","baselength","event","preventDefault","persist","setSelectionRange","handleBlur","render","React","ref","input","type","onFocus","onMouseUp","Component","propTypes","PropTypes","func","oneOfType","number","string","bool","defaultProps","maskValue"],"mappings":"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"}